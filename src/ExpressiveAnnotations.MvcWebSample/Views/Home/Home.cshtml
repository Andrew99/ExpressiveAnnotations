@using ExpressiveAnnotations.MvcWebSample
@using ExpressiveAnnotations.MvcWebSample.Misc
@model ExpressiveAnnotations.MvcWebSample.Models.Query

@{ var lang = System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName; }

<div class="box">
    <div class="left-corner">
        <h1>ExpressiveAnnotations - annotation-based conditional validation</h1>
    </div>
    <div class="right-corner">
        <a href="https://github.com/JaroslawWaliszko/ExpressiveAnnotations/tree/EA1">[more on github]</a>    
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="message-success">@(ViewBag.Success ?? Html.Raw("&nbsp;"))</div>

    <fieldset>
        <legend>Usage sample for model validation in ASP.NET MVC</legend>
        <div class="box-small">
            <div class="right-corner">
                @Html.Partial("_Culture")
                @Html.Partial("_Validation")
            </div>
        </div>
        <ol>
            <li>
                @Html.EditorFor(model => model.GoAbroad)
                @Html.LabelFor(model => model.GoAbroad, new {@class = "inline"})
                @Html.ValidationMessageFor(model => model.GoAbroad)
            </li>
            <li>
                <pre class="code">
[Required]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.Age, new { @class = "inline prefix" })
                @Html.DropDownListFor(model => model.Age, new SelectList(Model.Years, null))
                @Html.ValidationMessageFor(model => model.Age)
            </li>
            <li>
                <pre class="code">
[RequiredIf(
    DependentProperty = "GoAbroad", 
    TargetValue = true)]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.PassportNumber, new { @class = "inline prefix" })
                @Html.EditorFor(model => model.PassportNumber)
                @Html.ValidationMessageFor(model => model.PassportNumber)
            </li>
            <li>
                @Html.LabelFor(model => model.Country, new {@class = "inline prefix"})
                @Html.DropDownListFor(model => model.Country, new SelectList(Model.Countries, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.Country)
            </li>
            <li>
                @Html.LabelFor(model => model.NextCountry, new {@class = "inline prefix"})
                @Html.DropDownListFor(model => model.NextCountry, new SelectList(Model.Countries, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.NextCountry)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => GoAbroad == true 
                        *                   && ( 
                        *                        (NextCountry != "Other" && NextCountry == value_from_country) 
                        *                        || Age ∈ (24, 55> 
                        *                      )
                        */
    Expression = "{0} && ( (!{1} && {2}) || ({3} && {4}) )",
    DependentProperties = new[] {"GoAbroad", "NextCountry", "NextCountry", "Age", "Age"},
    RelationalOperators = new[] {"==",       "==",          "==",          "&gt;",   "&le;"},
    TargetValues = new object[] {true,       "Other",       "[Country]",   24,    55},
    ErrorMessage = "If you plan to go abroad and you are between 25 and 55 or plan 
                    to visit the same foreign country twice, write down your reasons.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReasonForTravel, new { @class = "inline prefix" })
                @Html.TextAreaFor(model => model.ReasonForTravel)
                @Html.ValidationMessageFor(model => model.ReasonForTravel)
            </li>
            <li>
                @Html.EditorFor(model => model.LatestSuggestedReturnDate)   @*hidden backing field storing date in RFC 2822 or ISO 8601 format*@
                @Html.EditorFor(model => model.Today)
                <pre class="code">
[RequiredIf(
    DependentProperty = "GoAbroad", 
    TargetValue = true)]
[AssertThat(
    DependentProperty = "ReturnDate",
    RelationalOperator = ">=" ,
    TargetValue = "[Today]")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReturnDate, new { @class = "inline prefix" })
                @Html.EditorFor(model => model.ReturnDate) @Resources.LatestSuggestedReturnDate: @Model.LatestSuggestedReturnDate.ToString(lang == "pl" ? "yyyy-MM-dd" : "MM/dd/yyyy")
                @Html.ValidationMessageFor(model => model.ReturnDate)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => GoAbroad == true 
                        *                   && ReturnDate > value_from_latest_suggested_return_date (stored in RFC 2822 or ISO 8601 format)
                        */
            Expression = "{0} && {1}",
            DependentProperties = new[] {"GoAbroad", "ReturnDate"},
            RelationalOperators = new[] {"==",       ">"},
            TargetValues = new object[] {true,       "[LatestSuggestedReturnDate]"},
            ErrorMessage = "If you plan to stay abroad longer than one month from now, write down your reasons.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReasonForLongTravel, new { @class = "inline prefix" })
                @Html.TextAreaFor(model => model.ReasonForLongTravel)
                @Html.ValidationMessageFor(model => model.ReasonForLongTravel)
            </li>
            <li>
                <pre class="code">
[RequiredIf(
    DependentProperty = "GoAbroad", 
    TargetValue = true)]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.PoliticalStability, new { @class = "inline prefix" })
                @Html.EnumDropDownListFor(model => model.PoliticalStability)
                @Html.ValidationMessageFor(model => model.PoliticalStability)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => PoliticalStability != null && PoliticalStability != Stability.High */
    Expression = "!{0} && !{1}",
    DependentProperties = new[] {"PoliticalStability", "PoliticalStability"},
    TargetValues = new object[] {null,                 Stability.High},
    ErrorMessage = "You are required to agree that you are aware of the risks of travel.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.EditorFor(model => model.AwareOfTheRisks)
                @Html.LabelFor(model => model.AwareOfTheRisks, new { @class = "inline" })
                @Html.ValidationMessageFor(model => model.AwareOfTheRisks)
            </li>
            <li>
                @Html.LabelFor(model => model.SportType, new { @class = "inline prefix" })
                @foreach (var item in Model.Sports)
                {
                    @Html.RadioButtonFor(model => model.SportType, item.Value) <label class="inline">@item.Text</label>
                }
                @Html.ValidationMessageFor(model => model.SportType)                
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => SportType == "Extreme" || (SportType != "None" && GoAbroad) */
    Expression = "{0} || (!{1} && {2})",
    DependentProperties = new[] {"SportType", "SportType", "GoAbroad"},
    TargetValues = new object[] {"Extreme",   "None",      true},
    ErrorMessage = "Blood type is required if you do extreme sports, 
                    or if you do any type of sport and plan to go abroad.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.BloodType, new { @class = "inline prefix" })
                @Html.EditorFor(model => model.BloodType)
                @Html.ValidationMessageFor(model => model.BloodType)
            </li>
            <li>
                @Html.EditorFor(model => model.ContactDetails)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => ContactDetails.Email == "*" || ContactDetails.Phone == "*" */
    Expression = "{0} || {1}",
    DependentProperties = new[] {"ContactDetails.Email", "ContactDetails.Phone"}, /* nested properties are supported */
    TargetValues = new object[] {"*",                    "*"}, /* any values */
    ErrorMessage = "You have to authorize us to contact you.")]

one of possible equivalents is:

[RequiredIfExpression( /* interpretation => ContactDetails.Email != null || ContactDetails.Phone != null */
    Expression = "!{0} || !{1}",
    DependentProperties = new[] {"ContactDetails.Email", "ContactDetails.Phone"},
    TargetValues = new object[] {null,                   null}, /* no values */
    ErrorMessage = "You have to authorize us to contact you.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.RadioButtonFor(model => model.AgreeForContact, true) <label class="inline">@Resources.SpamAllowed</label>
                @Html.RadioButtonFor(model => model.AgreeForContact, false) <label class="inline">@Resources.SpamForbidden</label>
                @Html.ValidationMessageFor(model => model.AgreeForContact)
            </li>
            
            <li>
                <pre class="code">
[RequiredIf(
    DependentProperty = "AgreeForContact", 
    TargetValue = true,
    AllowEmptyOrFalse = true)]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ImmediateContact, new { @class = "inline prefix" })
                @Html.DropDownListFor(model => model.ImmediateContact, new SelectList(Model.Answers, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.ImmediateContact)
            </li>
        </ol>
        <input type="submit" />
    </fieldset>
}

@section Scripts {
    @if ("client".Equals(ViewBag.Validation))
    {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/expressive")
    }
    
    <script>
        $(document).ready(function () {
            $('.action').click(function () {
                $(this).hide();
                $(this).parent().find('.code').toggle('slow');
            });
            $("#ReturnDate").datepicker($.datepicker.regional["@lang"]);
        });

        $.datepicker.regional['pl'] = {
            closeText: 'Zamknij',
            prevText: '&#x3C;Poprzedni',
            nextText: 'Następny&#x3E;',
            currentText: 'Dziś',
            monthNames: ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec',
            'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'],
            monthNamesShort: ['Sty', 'Lu', 'Mar', 'Kw', 'Maj', 'Cze',
            'Lip', 'Sie', 'Wrz', 'Pa', 'Lis', 'Gru'],
            dayNames: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'],
            dayNamesShort: ['Nie', 'Pn', 'Wt', 'Śr', 'Czw', 'Pt', 'So'],
            dayNamesMin: ['N', 'Pn', 'Wt', 'Śr', 'Cz', 'Pt', 'So'],
            weekHeader: 'Tydz',
            dateFormat: 'yy-mm-dd',
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ''
        };
    </script>
}