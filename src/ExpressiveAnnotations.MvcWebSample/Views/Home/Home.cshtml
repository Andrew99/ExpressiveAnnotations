@using ExpressiveAnnotations.MvcWebSample
@using ExpressiveAnnotations.MvcWebSample.Misc
@model ExpressiveAnnotations.MvcWebSample.Models.Query

<div class="box">
    <div class="left-corner">
        <h1>ExpressiveAnnotations - annotation-based conditional validation</h1>
    </div>
    <div class="right-corner">
        <a href="https://github.com/JaroslawWaliszko/ExpressiveAnnotations">[more on github]</a>    
    </div>
</div>

<p>
    ExpressiveAnnotations is a small .NET and JavaScript library, which provides annotation-based conditional validation 
    mechanisms. Given implementation of RequiredIf and RequiredIfExpression attributes allows to forget about imperative 
    way of step-by-step verification of validation conditions in many cases. This in turn results in less amount of code 
    which is also more compacted, since fields validation requirements are applied as metadata, just in the place of 
    such fields declaration.
</p>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    if (ViewBag.Success != null)
    {
        <div class="message-success">@ViewBag.Success</div>
    }

    <fieldset>
        <legend>Usage sample for model validation in ASP.NET MVC</legend>
        <div class="box-small">
            <div class="right-corner">
                @Html.Partial("_Culture")
                @Html.Partial("_Validation")
            </div>
        </div>
        <ol>
            <li>
                @Html.EditorFor(model => model.GoAbroad)
                @Html.LabelFor(model => model.GoAbroad, new {@class = "inline"})
                @Html.ValidationMessageFor(model => model.GoAbroad)
            </li>
            <li>
                <pre class="code">
[Required]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.Age, new { @class = "inline prefix" })
                @Html.DropDownListFor(x => x.Age, new SelectList(Model.Years, null))
                @Html.ValidationMessageFor(model => model.Age)
            </li>
            <li>
                <pre class="code">
[RequiredIf(
    DependentProperty = "GoAbroad", 
    TargetValue = true]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.PassportNumber)
                @Html.EditorFor(model => model.PassportNumber)
                @Html.ValidationMessageFor(model => model.PassportNumber)
            </li>
            <li>
                @Html.LabelFor(model => model.Country, new {@class = "inline prefix"})
                @Html.DropDownListFor(x => x.Country, new SelectList(Model.Countries, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.Country)
            </li>
            <li>
                @Html.LabelFor(model => model.NextCountry, new {@class = "inline prefix"})
                @Html.DropDownListFor(x => x.NextCountry, new SelectList(Model.Countries, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.NextCountry)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => GoAbroad == true 
                        *                   && ( (NextCountry != "Other" && NextCountry == value_from_country)) 
                        *                        || Age ∈ (24, 55> 
                        *                      )
                        */
    Expression = "{0} && ( (!{1} && {2}) || ({3} && {4}) )",
    DependentProperties = new[] {"GoAbroad", "NextCountry", "NextCountry", "Age", "Age"},
    RelationalOperators = new[] {"==", "==", "==", "&gt;", "&le;"},
    TargetValues = new object[] {true, "Other", "[Country]", 24, 55},
    ErrorMessage = "If you plan to go abroad and you are between 25 and 55 or plan 
                    to visit the same foreign country twice, write down your reasons.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReasonForTravel)
                @Html.TextAreaFor(model => model.ReasonForTravel)
                @Html.ValidationMessageFor(model => model.ReasonForTravel)
            </li>
            <li>
                <pre class="code">
[RequiredIf(
    DependentProperty = "GoAbroad", 
    RelationalOperator = "!=", 
    TargetValue = false)]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.PoliticalStability, new { @class = "inline prefix" })
                @Html.EnumDropDownListFor(x => x.PoliticalStability)
                @Html.ValidationMessageFor(model => model.PoliticalStability)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => PoliticalStability != null && PoliticalStability != Stability.High */
    Expression = "!{0} && !{1}",
    DependentProperties = new[] {"PoliticalStability", "PoliticalStability"},
    TargetValues = new object[] {null, Stability.High},
    ErrorMessage = "You are required to agree that you are aware of the risks of travel.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.EditorFor(model => model.AwareOfTheRisks)
                @Html.LabelFor(model => model.AwareOfTheRisks, new { @class = "inline" })
                @Html.ValidationMessageFor(model => model.AwareOfTheRisks)
            </li>
            <li>
                @Html.LabelFor(model => model.SportType)
                @foreach (var item in Model.Sports)
                {
                    @Html.RadioButtonFor(m => m.SportType, item.Value) <label class="inline">@item.Text</label>
                }
                @Html.ValidationMessageFor(model => model.SportType)                
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => SportType == "Extreme" || (SportType != "None" && GoAbroad) */
    Expression = "{0} || (!{1} && {2})",
    DependentProperties = new[] {"SportType", "SportType", "GoAbroad"},
    TargetValues = new object[] {"Extreme", "None", true},
    ErrorMessage = "Blood type is required if you do extreme sports, 
                    or if you do any type of sport and plan to go abroad.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.BloodType)
                @Html.EditorFor(model => model.BloodType)
                @Html.ValidationMessageFor(model => model.BloodType)
            </li>
            <li>
                @Html.EditorFor(model => model.ContactDetails)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => ContactDetails.Email == "*" || ContactDetails.Phone == "*" */
    Expression = "{0} || {1}",
    DependentProperties = new[] {"ContactDetails.Email", "ContactDetails.Phone"}, /* nested properties are supported */
    TargetValues = new object[] {"*", "*"}, /* any values */
    ErrorMessage = "You have to authorize us to contact you.")]

one of possible equivalents is:
                    
[RequiredIfExpression( /* interpretation => ContactDetails.Email != null || ContactDetails.Phone != null */
    Expression = "!{0} || !{1}",
    DependentProperties = new[] {"ContactDetails.Email", "ContactDetails.Phone"},
    TargetValues = new object[] {null, null}, /* no values */
    ErrorMessage = "You have to authorize us to contact you.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.RadioButtonFor(model => model.AgreeForContact, true) <label class="inline">@Resources.SpamAllowed</label>
                @Html.RadioButtonFor(model => model.AgreeForContact, false) <label class="inline">@Resources.SpamForbidden</label>
                @Html.ValidationMessageFor(model => model.AgreeForContact)
            </li>
        </ol>
        <input type="submit" />
    </fieldset>
}

@section Scripts {
    @if ("client".Equals(ViewBag.Validation))
    {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/expressive")
    }
    
    <script>
        $(document).ready(function () {
            $('.action').click(function () {
                $(this).hide();
                $(this).parent().find('.code').toggle('slow');
            });
        });
    </script>
}