@model ExpressiveAnnotations.MvcWebSample.Models.Query

<h1>ExpressiveAnnotations - annotation-based conditional validation</h1>

<p>
    ExpressiveAnnotations is a small .NET library which provides annotation-based conditional validation mechanisms. 
    Given implementation of RequiredIf and RequiredIfExpression attributes allows to forget about imperative way
    of step-by-step verification of validation conditions in many cases. This in turn results in less amount of code 
    which is also more compacted, since fields validation requirements are applied as metadata, just in the place of 
    such fields declaration.
</p>

<a href="https://github.com/JaroslawWaliszko/ExpressiveAnnotations" class="right">[more on github]</a>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Usage sample for model validation in ASP.NET MVC</legend>
        <ol>
            <li>
                @Html.EditorFor(model => model.GoAbroad)
                @Html.LabelFor(model => model.GoAbroad, new {@class = "inline"})
                @Html.ValidationMessageFor(model => model.GoAbroad)
            </li>
            <li>
                <pre class="code">[RequiredIf(DependentProperty = "GoAbroad", TargetValue = true)]</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.PassportNumber)
                @Html.EditorFor(model => model.PassportNumber)
                @Html.ValidationMessageFor(model => model.PassportNumber)
            </li>
            <li>
                @Html.LabelFor(model => model.Country, new {@class = "inline prefix"})
                @Html.DropDownListFor(x => x.Country, new SelectList(Model.Countries, "Text", "Value"))
                @Html.ValidationMessageFor(model => model.Country)
            </li>
            <li>
                @Html.LabelFor(model => model.NextCountry, new {@class = "inline prefix"})
                @Html.DropDownListFor(x => x.NextCountry, new SelectList(Model.Countries, "Text", "Value"))
                @Html.ValidationMessageFor(model => model.NextCountry)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression(  /* interpretation => GoAbroad == true && NextCountry != "Other" && NextCountry == [value from Country] */
    Expression = "{0} && !{1} && {2}",
    DependentProperties = new[] { "GoAbroad", "NextCountry", "NextCountry" },
    TargetValues = new object[] { true, "Other", "[Country]" },
    ErrorMessage = "If you plan to go abroad, why do you want to visit the same country twice?")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReasonForTravel)
                @Html.EditorFor(model => model.ReasonForTravel)
                @Html.ValidationMessageFor(model => model.ReasonForTravel)
            </li>
            <li>
                @Html.LabelFor(model => model.SportType, new {@class = "inline prefix"})
                @Html.DropDownListFor(x => x.SportType, new SelectList(Model.Sports, "Text", "Value"))
                @Html.ValidationMessageFor(model => model.SportType)
            </li>
            <li>
                <pre class="code">
[RequiredIfExpression( /* interpretation => SportType == "Extreme" || (SportType != "None" && GoAbroad) */
    Expression = "{0} || (!{1} && {2})",
    DependentProperties = new[] { "SportType", "SportType", "GoAbroad" },
    TargetValues = new object[] { "Extreme", "None", true },
    ErrorMessage = "Blood type is required if you do extreme sports, or if you do any type of sport and plan to go abroad.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.BloodType)
                @Html.EditorFor(model => model.BloodType)
                @Html.ValidationMessageFor(model => model.BloodType)
            </li>
            <li>
                @Html.EditorFor(model => model.ContactDetails)
            </li>
            <li>
                <pre class="code">
[RequiredIf(
    DependentProperty = "ContactDetails.Email", /* nested properties can be used */
    TargetValue = "*",  /* any value */
    ErrorMessage = "You have to authorize us to send an email under provided address in case of any problem.")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.EditorFor(model => model.AgreeToContact)
                @Html.LabelFor(model => model.AgreeToContact, new {@class = "inline"})
                @Html.ValidationMessageFor(model => model.AgreeToContact)
            </li>            
        </ol>
        <input type="submit" />
    </fieldset>
}